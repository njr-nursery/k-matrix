#!/usr/bin/env bash

base="$(cd "$(dirname "$0")" && pwd -P)"

progress() { echo >&2 == "$@"; }
die() { echo >&2 FATAL: $@; exit 1; }

# TODO: We need to build the version of K we're testing against, so
# that we know that they were build cleanly from a particular SHA.
have_k() { type kompile >/dev/null || die "kompile unavailable."; }

do_kompile() {
    local lang_file="$1"; shift         # Absolute path to a '.k' file
    local relative=${lang_file##$base/tests/}
    local rel_dirname=${relative%%.k}

    local target_dir=".build/$rel_dirname"
    mkdir -p "$target_dir"
    kompile -d "$target_dir" "$lang_file"
    echo "$target_dir"
}

do_run() {
    local out_file="$1"
    local program="${out_file%.out}"
    local lang="${program##*.}"    # Extract lang from extension
    local k_def="$(dirname "$out_file")/$lang.k"
    [[ -e "$k_def"   ]] || die "K definition '$k_def' doesn't exist"
    [[ -e "$program" ]] || die "Program '$program' doesn't exist"

    progress "Kompiling $k_def"
    lang_kompiled="$(do_kompile "$k_def")"
    progress "Running $program"
    krun -d "$lang_kompiled" "$program"
}

cd "$base"
have_k

while read out_file; do
    do_run "$out_file"
done < <(find tests/ -name '*.out')
