#!/usr/bin/env bash

base="$(cd "$(dirname "$0")" && pwd -P)"
test_base="$base/.build/tests/"

progress() { echo >&2 == "$@"; }
die() { echo >&2 FATAL: $@; exit 1; }

need_in_path() { type "$1" >/dev/null || die "$1 unavailable."; }

do_kompile() {
    local lang_file="$1"; shift         # Absolute path to a '.k' file
    local relative="${lang_file##$test_base}"
    local rel_dirname=${relative%%.k}

    local target_dir="$rel_dirname"
    mkdir -p "$target_dir"
    kompile -d "$target_dir" "$lang_file"
    echo "$target_dir"
}

do_run() {
    local out_file="$1"
    local program="${out_file%.out}"
    local lang="${program##*.}"    # Extract lang from extension
    local k_def="$(dirname "$out_file")/$lang.k"
    [[ -e "$k_def"   ]] || die "K definition '$k_def' doesn't exist"
    [[ -e "$program" ]] || die "Program '$program' doesn't exist"

    progress "Kompiling $k_def"
    lang_kompiled="$(do_kompile "$k_def")"
    progress "Running $program"
    do_diff <(krun -d "$lang_kompiled" "$program") "$out_file"
}

my_diff=colordiff
type colordiff >/dev/null 2>/dev/null || my_diff=diff
do_diff() {
    local actual="$1"; shift
    local expected="$1"; shift
    "$my_diff" -u --label Actual "$actual" --label Expected "$expected"
}

# TODO: This is not going to work. We need tangle to automatically figure out
# what files are in the markdown, and write them all to disk.
do_tangle() {
    local md="$1"
    local out_dir=".build/tests/$(basename "$md" .md)"
    local tangle_args=(--strip-text --from markdown --to code-k --code)
    mkdir -p "$out_dir"
    pandoc-tangle "${tangle_args[@]}" lang-k       "$md" > "$out_dir/lang.k"
    pandoc-tangle "${tangle_args[@]}" foo.lang     "$md" > "$out_dir/foo.lang"
    pandoc-tangle "${tangle_args[@]}" foo.lang.out "$md" > "$out_dir/foo.lang.out"
}

cd "$base"

# TODO: We need to build the version of K we're testing against, so
# that we know that they were build cleanly from a particular SHA.
need_in_path kompile

need_in_path pandoc-tangle

do_tangle basic.md

while read out_file; do
    do_run "$out_file"
done < <(find "$test_base" -name '*.out')
