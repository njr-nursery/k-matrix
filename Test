#!/usr/bin/env bash

set -eu

base="$(cd "$(dirname "$0")" && pwd -P)"
test_base="$base/tests/"

progress() { echo >&2 == "$@"; }
die() { echo >&2 FATAL: $@; exit 1; }

# TODO: We need to build the version of K we're testing against, so
# that we know that they were build cleanly from a particular SHA.
have_k() { type kompile >/dev/null || die "kompile unavailable."; }

do_kompile() {
    mkdir -p "$target_dir"
    kompile -d "$target_dir" "$lang_file"
    echo "$target_dir"
}

do_test() {
    local out_file="$1"
    local program="${out_file%.out}"
    local lang="${program##*.}"    # Extract lang from extension
    local k_def="$(dirname "$out_file")/$lang.k"

    local relative="${k_def##$test_base}"
    local rel_dirname=${relative%%.k}
    local target_dir=".build/$rel_dirname"

    progress "Building spec $k_def"
    [[ -e "$k_def" ]] || die "K definition '$k_def' doesn't exist"
    build-spec "$k_def" "$target_dir"

    progress "Running program $program"
    [[ -e "$program" ]] || die "Program '$program' doesn't exist"
    do_diff <(run-with-built-spec "$program" "$target_dir") "$out_file"
}

my_diff=colordiff
type colordiff >/dev/null 2>/dev/null || my_diff=diff
do_diff() {
    local actual="$1"; shift
    local expected="$1"; shift
    "$my_diff" -u --label Actual "$actual" --label Expected "$expected"
}

cd "$base"
have_k

while read out_file; do
    do_test "$out_file"
done < <(find "$test_base" -name '*.out')
